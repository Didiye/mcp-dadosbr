name: CI/CD Pipeline

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run tests
        run: npm test

      - name: Test stdio transport
        run: |
          timeout 10s bash -c 'echo "{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/list\"}" | npm start' || true

      - name: Test HTTP transport
        run: |
          MCP_TRANSPORT=http npm start &
          SERVER_PID=$!
          sleep 3
          curl -f -X POST http://localhost:3000/mcp \
            -H "Content-Type: application/json" \
            -d '{"jsonrpc": "2.0", "id": 1, "method": "tools/list"}' || true
          kill $SERVER_PID || true


  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check TypeScript
        run: npx tsc --noEmit

      - name: Check line count constraint
        run: |
          LINE_COUNT=$(wc -l < server.ts)
          echo "Current line count: $LINE_COUNT"
          if [ $LINE_COUNT -gt 350 ]; then
            echo "❌ Server file exceeds 350 lines ($LINE_COUNT lines)"
            exit 1
          else
            echo "✅ Server file is within acceptable limits ($LINE_COUNT lines)"
          fi

  cloudflare:
    name: Cloudflare Workers Build
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build for Cloudflare Workers
        run: npm run build:worker

      - name: Validate wrangler.toml
        run: |
          # Install wrangler for validation
          npm install -g wrangler

          # Validate configuration
          wrangler validate

      - name: Check worker build output
        run: |
          if [ ! -f "dist/worker.js" ]; then
            echo "❌ Worker build failed - dist/worker.js not found"
            exit 1
          fi

          # Check if the worker file is not empty
          if [ ! -s "dist/worker.js" ]; then
            echo "❌ Worker build failed - dist/worker.js is empty"
            exit 1
          fi

          echo "✅ Cloudflare Worker build successful"

          # Show build size
          WORKER_SIZE=$(wc -c < dist/worker.js)
          echo "Worker bundle size: ${WORKER_SIZE} bytes"

name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run tests
        run: npm test

      - name: Test stdio transport
        run: |
          timeout 10s bash -c 'echo "{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/list\"}" | npm start' || true

      - name: Test HTTP transport
        run: |
          MCP_TRANSPORT=http npm start &
          SERVER_PID=$!
          sleep 3
          curl -f -X POST http://localhost:3000/mcp \
            -H "Content-Type: application/json" \
            -d '{"jsonrpc": "2.0", "id": 1, "method": "tools/list"}' || true
          kill $SERVER_PID || true

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check TypeScript
        run: npx tsc --noEmit

      - name: Check line count constraint
        run: |
          TARGET_FILE="lib/core/mcp-server.ts"
          if [ ! -f "$TARGET_FILE" ]; then
            echo "‚ÑπÔ∏è Skipping line count check - $TARGET_FILE not found"
            exit 0
          fi

          LINE_COUNT=$(wc -l < "$TARGET_FILE")
          echo "Current line count in $TARGET_FILE: $LINE_COUNT"
          if [ "$LINE_COUNT" -gt 350 ]; then
            echo "‚ùå $TARGET_FILE exceeds 350 lines ($LINE_COUNT lines)"
            exit 1
          else
            echo "‚úÖ $TARGET_FILE is within acceptable limits ($LINE_COUNT lines)"
          fi

  cloudflare:
    name: Cloudflare Workers Build
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build for Cloudflare Workers
        run: npm run build:worker

      - name: Check worker build output
        run: |
          if [ ! -f "build/lib/workers/worker.js" ]; then
            echo "‚ùå Worker build failed - build/lib/workers/worker.js not found"
            exit 1
          fi

          # Check if the worker file is not empty
          if [ ! -s "build/lib/workers/worker.js" ]; then
            echo "‚ùå Worker build failed - build/lib/workers/worker.js is empty"
            exit 1
          fi

          echo "‚úÖ Cloudflare Worker build successful"

          # Show build size
          WORKER_SIZE=$(wc -c < build/lib/workers/worker.js)
          echo "Worker bundle size: ${WORKER_SIZE} bytes"

      - name: Check worker bundle size
        run: |
          WORKER_FILE="build/lib/workers/worker.js"
          if [ ! -f "$WORKER_FILE" ]; then
            echo "‚ö†Ô∏è Worker file not found at $WORKER_FILE"
            exit 0
          fi

          WORKER_SIZE=$(wc -c < "$WORKER_FILE")
          MAX_SIZE=1048576  # 1MB in bytes
          SIZE_MB=$(echo "scale=2; $WORKER_SIZE / 1048576" | bc)

          echo "üì¶ Worker bundle size: ${SIZE_MB}MB ($WORKER_SIZE bytes)"

          if [ $WORKER_SIZE -gt $MAX_SIZE ]; then
            echo "‚ùå Worker exceeds Cloudflare's 1MB limit"
            exit 1
          else
            echo "‚úÖ Worker is within size limits"
          fi

  publish-dev:
    name: Publish Development Version
    runs-on: ubuntu-latest
    needs: [test, lint, cloudflare]
    # Only publish on push to main (not PRs) and only if NPM_TOKEN is available
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'cristianoaredes/mcp-dadosbr'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Configure NPM authentication
        run: |
          if [ -z "$NPM_TOKEN" ]; then
            echo "‚ö†Ô∏è  NPM_TOKEN not available, skipping publication"
            exit 0
          fi
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Check if version already published
        id: check_version
        run: |
          PACKAGE_NAME="@aredes.me/mcp-dadosbr"
          PACKAGE_VERSION=$(node -p "require('./package.json').version")

          echo "üì¶ Checking if $PACKAGE_NAME@$PACKAGE_VERSION is already published..."

          if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version 2>/dev/null; then
            echo "‚ÑπÔ∏è  Version $PACKAGE_VERSION already exists on NPM"
            echo "published=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Version $PACKAGE_VERSION not found on NPM, will publish"
            echo "published=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish development version to NPM
        if: steps.check_version.outputs.published == 'false'
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")

          echo "üì¶ Publishing development version $PACKAGE_VERSION to NPM..."

          # Publish with 'dev' tag for development versions
          npm publish --access public --tag dev

          echo "‚úÖ Development version published successfully"
          echo "üì¶ Install with: npm install -g @aredes.me/mcp-dadosbr@dev"

      - name: Verify development publication
        if: steps.check_version.outputs.published == 'false'
        run: |
          PACKAGE_NAME="@aredes.me/mcp-dadosbr"
          PACKAGE_VERSION=$(node -p "require('./package.json').version")

          echo "‚è≥ Waiting for NPM registry to update..."
          sleep 5

          # Try to fetch the package info with dev tag
          if npm view "$PACKAGE_NAME@dev" version > /dev/null 2>&1; then
            echo "‚úÖ Development version successfully published to NPM"
            echo "üì¶ Install: npm install -g $PACKAGE_NAME@dev"
            echo "üì¶ View: https://www.npmjs.com/package/$PACKAGE_NAME"
          else
            echo "‚ö†Ô∏è  Development version may still be processing on NPM"
          fi

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test, lint, cloudflare, publish-dev]
    if: always()

    steps:
      - name: Generate CI summary
        run: |
          echo "## üîÑ CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Test results
          if [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "‚úÖ **Tests**: All passed (Node.js 18.x, 20.x)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          # Lint results
          if [[ "${{ needs.lint.result }}" == "success" ]]; then
            echo "‚úÖ **Code Quality**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Code Quality**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          # Cloudflare build results
          if [[ "${{ needs.cloudflare.result }}" == "success" ]]; then
            echo "‚úÖ **Cloudflare Workers**: Build successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Cloudflare Workers**: Build failed" >> $GITHUB_STEP_SUMMARY
          fi

          # Development publish results
          if [[ "${{ needs.publish-dev.result }}" == "success" ]]; then
            echo "‚úÖ **NPM Dev Publish**: Published" >> $GITHUB_STEP_SUMMARY
            echo "   - Install: \`npm install -g @aredes.me/mcp-dadosbr@dev\`" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.publish-dev.result }}" == "skipped" ]]; then
            echo "‚è≠Ô∏è  **NPM Dev Publish**: Skipped (no token or not main branch)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **NPM Dev Publish**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package Info:**" >> $GITHUB_STEP_SUMMARY
          echo "- **Name**: \`@aredes.me/mcp-dadosbr\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $(node -p "require('./package.json').version")" >> $GITHUB_STEP_SUMMARY
          echo "- **NPM**: [View on NPM](https://www.npmjs.com/package/@aredes.me/mcp-dadosbr)" >> $GITHUB_STEP_SUMMARY
          echo "- **Cloudflare**: [Live Demo](https://mcp-dadosbr.aredes.me)" >> $GITHUB_STEP_SUMMARY
